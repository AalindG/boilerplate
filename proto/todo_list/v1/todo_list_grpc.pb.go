// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: todo_list/v1/todo_list.proto

package todo_listv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TodoListService_CreateList_FullMethodName     = "/todo_list.v1.TodoListService/CreateList"
	TodoListService_AddListElement_FullMethodName = "/todo_list.v1.TodoListService/AddListElement"
	TodoListService_GetList_FullMethodName        = "/todo_list.v1.TodoListService/GetList"
	TodoListService_FetchAllLists_FullMethodName  = "/todo_list.v1.TodoListService/FetchAllLists"
)

// TodoListServiceClient is the client API for TodoListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoListServiceClient interface {
	CreateList(ctx context.Context, in *CreateListRequest, opts ...grpc.CallOption) (*CreateListResponse, error)
	AddListElement(ctx context.Context, in *AddListElementRequest, opts ...grpc.CallOption) (*AddListElementResponse, error)
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	FetchAllLists(ctx context.Context, in *FetchAllListsRequest, opts ...grpc.CallOption) (TodoListService_FetchAllListsClient, error)
}

type todoListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoListServiceClient(cc grpc.ClientConnInterface) TodoListServiceClient {
	return &todoListServiceClient{cc}
}

func (c *todoListServiceClient) CreateList(ctx context.Context, in *CreateListRequest, opts ...grpc.CallOption) (*CreateListResponse, error) {
	out := new(CreateListResponse)
	err := c.cc.Invoke(ctx, TodoListService_CreateList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoListServiceClient) AddListElement(ctx context.Context, in *AddListElementRequest, opts ...grpc.CallOption) (*AddListElementResponse, error) {
	out := new(AddListElementResponse)
	err := c.cc.Invoke(ctx, TodoListService_AddListElement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoListServiceClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, TodoListService_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoListServiceClient) FetchAllLists(ctx context.Context, in *FetchAllListsRequest, opts ...grpc.CallOption) (TodoListService_FetchAllListsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TodoListService_ServiceDesc.Streams[0], TodoListService_FetchAllLists_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &todoListServiceFetchAllListsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TodoListService_FetchAllListsClient interface {
	Recv() (*FetchAllListsResponse, error)
	grpc.ClientStream
}

type todoListServiceFetchAllListsClient struct {
	grpc.ClientStream
}

func (x *todoListServiceFetchAllListsClient) Recv() (*FetchAllListsResponse, error) {
	m := new(FetchAllListsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TodoListServiceServer is the server API for TodoListService service.
// All implementations should embed UnimplementedTodoListServiceServer
// for forward compatibility
type TodoListServiceServer interface {
	CreateList(context.Context, *CreateListRequest) (*CreateListResponse, error)
	AddListElement(context.Context, *AddListElementRequest) (*AddListElementResponse, error)
	GetList(context.Context, *GetListRequest) (*GetListResponse, error)
	FetchAllLists(*FetchAllListsRequest, TodoListService_FetchAllListsServer) error
}

// UnimplementedTodoListServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTodoListServiceServer struct {
}

func (UnimplementedTodoListServiceServer) CreateList(context.Context, *CreateListRequest) (*CreateListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateList not implemented")
}
func (UnimplementedTodoListServiceServer) AddListElement(context.Context, *AddListElementRequest) (*AddListElementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddListElement not implemented")
}
func (UnimplementedTodoListServiceServer) GetList(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedTodoListServiceServer) FetchAllLists(*FetchAllListsRequest, TodoListService_FetchAllListsServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchAllLists not implemented")
}

// UnsafeTodoListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoListServiceServer will
// result in compilation errors.
type UnsafeTodoListServiceServer interface {
	mustEmbedUnimplementedTodoListServiceServer()
}

func RegisterTodoListServiceServer(s grpc.ServiceRegistrar, srv TodoListServiceServer) {
	s.RegisterService(&TodoListService_ServiceDesc, srv)
}

func _TodoListService_CreateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoListServiceServer).CreateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoListService_CreateList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoListServiceServer).CreateList(ctx, req.(*CreateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoListService_AddListElement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddListElementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoListServiceServer).AddListElement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoListService_AddListElement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoListServiceServer).AddListElement(ctx, req.(*AddListElementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoListService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoListServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoListService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoListServiceServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoListService_FetchAllLists_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchAllListsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TodoListServiceServer).FetchAllLists(m, &todoListServiceFetchAllListsServer{stream})
}

type TodoListService_FetchAllListsServer interface {
	Send(*FetchAllListsResponse) error
	grpc.ServerStream
}

type todoListServiceFetchAllListsServer struct {
	grpc.ServerStream
}

func (x *todoListServiceFetchAllListsServer) Send(m *FetchAllListsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// TodoListService_ServiceDesc is the grpc.ServiceDesc for TodoListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "todo_list.v1.TodoListService",
	HandlerType: (*TodoListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateList",
			Handler:    _TodoListService_CreateList_Handler,
		},
		{
			MethodName: "AddListElement",
			Handler:    _TodoListService_AddListElement_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _TodoListService_GetList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchAllLists",
			Handler:       _TodoListService_FetchAllLists_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "todo_list/v1/todo_list.proto",
}
